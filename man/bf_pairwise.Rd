% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bayesfactor-helper.R
\name{bf_pairwise}
\alias{bf_pairwise}
\title{Pairwise Bayesian Comparisons from a brms Model}
\usage{
bf_pairwise(model, prior = NULL, specs, cont_values = NULL)
}
\arguments{
\item{model}{A fitted \code{brmsfit} object (posterior model).}

\item{prior}{Optional fitted \code{brmsfit} object representing the prior-only model.
If provided, it is used for Bayes Factor computation.}

\item{specs}{A formula or list of formulas specifying the marginal means to compute
(see \code{\link[emmeans]{emmeans}}). Multiple formulas can be provided using
\code{c(~ formula1, ~ formula2)}.}

\item{cont_values}{Optional named list specifying values of continuous variables at which
to estimate marginal means (e.g., \code{list(age = c(25, 40))}).}
}
\value{
A list with class "pairwise_comparison" containing:
\describe{
\item{emmeans}{An \code{emmGrid} object with the estimated marginal means for the posterior model.}
\item{pairwise}{Pairwise comparisons of the marginal means for the posterior model.}
\item{emmeans_prior}{An \code{emmGrid} object with the estimated marginal means for the prior model, if provided.}
\item{pairwise_prior}{Pairwise comparisons for the prior model, if provided.}
\item{bayesfactor}{Bayes Factors for each pairwise comparison.}
}

If multiple formulas are provided in \code{specs}, returns a list with class
"pairwise_comparison_list" containing the results for each formula.
}
\description{
Computes estimated marginal means, pairwise comparisons, and Bayes Factors for a fitted
\code{brmsfit} model. This function automates the process of conducting Bayesian pairwise
comparisons while handling continuous predictors appropriately.
}
\details{
Continuous variables are automatically detected from the model formula and identified as numeric
or integer columns in the model's data. By default, the function uses the mean value of each
continuous variable when computing marginal means.

If \code{cont_values} is provided, its values override the default (mean) for those variables.

If \code{prior} is provided, it is processed in the same way as \code{model} and used for
Bayes Factor computation via \code{bayestestR::bayesfactor_parameters}.

When \code{specs} is a list of formulas, the function processes each formula separately
and returns a list of results.
}
\examples{
\dontrun{
library(brms)
library(emmeans)
library(bayestestR)

# Create example data
data <- data.frame(
  subject = factor(rep(1:20, each = 4)),
  IV1 = factor(rep(c("A", "B"), each = 2, times = 20)),
  IV2 = factor(rep(c("X", "Y"), times = 40)),
  ContVar = rnorm(80, 10, 3),
  DV = rnorm(80, 5, 1.5)
)

# Fit models
fit <- brm(DV ~ IV1 * IV2 * ContVar + (1|subject),
           data = data, iter = 1000, chains = 2)
fit_prior <- brm(DV ~ IV1 * IV2 * ContVar + (1|subject),
                 data = data, sample_prior = "only", iter = 1000, chains = 2)

# Run pairwise comparisons with a single spec
res1 <- bf_pairwise(
  model = fit,
  prior = fit_prior,
  specs = ~ IV1 | IV2
)

# Run pairwise comparisons with multiple specs
res2 <- bf_pairwise(
  model = fit,
  prior = fit_prior,
  specs = c(~ IV1 | IV2, ~ IV2 | IV1)
)

# View results
print(res1$emmeans)
print(res1$pairwise)
print(res1$bayesfactor)
}

}
